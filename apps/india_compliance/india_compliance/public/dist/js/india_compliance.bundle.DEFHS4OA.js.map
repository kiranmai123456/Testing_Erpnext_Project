{
  "version": 3,
  "sources": ["../../../../../apps/india_compliance/india_compliance/public/js/regex_constants.js", "../../../../../apps/india_compliance/india_compliance/public/js/utils.js", "../../../../../apps/india_compliance/india_compliance/public/js/quick_entry.js", "../../../../../apps/india_compliance/india_compliance/public/js/transaction.js", "../../../../../apps/india_compliance/india_compliance/public/js/audit_trail_notification.js", "../../../../../apps/india_compliance/india_compliance/public/js/item_tax_template_notification.js", "../../../../../apps/india_compliance/india_compliance/public/js/quick_info_popover.js"],
  "sourcesContent": ["// Copied from india_compliance/gst_india/constants\n\nconst NORMAL = \"^[0-9]{2}[A-Z]{5}[0-9]{4}[A-Z]{1}[1-9A-Z]{1}[Z1-9ABD-J]{1}[0-9A-Z]{1}$\";\nconst GOVT_DEPTID = \"^[0-9]{2}[A-Z]{4}[0-9]{5}[A-Z]{1}[0-9]{1}[Z]{1}[0-9]{1}$\";\nconst NRI_ID = \"^[0-9]{4}[A-Z]{3}[0-9]{5}[N][R][0-9A-Z]{1}$\";\nconst OIDAR = \"^[9][9][0-9]{2}[A-Z]{3}[0-9]{5}[O][S][0-9A-Z]{1}$\";\nconst UNBODY = \"^[0-9]{4}[A-Z]{3}[0-9]{5}[UO]{1}[N][A-Z0-9]{1}$\";\nconst TDS = \"^[0-9]{2}[A-Z]{4}[A-Z0-9]{1}[0-9]{4}[A-Z]{1}[1-9A-Z]{1}[D][0-9A-Z]$\";\n\nexport const REGISTERED_REGEX = new RegExp([NORMAL, GOVT_DEPTID].join(\"|\"));\nexport const OVERSEAS_REGEX = new RegExp([NRI_ID, OIDAR].join(\"|\"));\nexport const UNBODY_REGEX = new RegExp(UNBODY);\nexport const TDS_REGEX = new RegExp(TDS);\n\n// TDS is covered in Normal, hence not included separately\nexport const GSTIN_REGEX = new RegExp(\n    [NORMAL, GOVT_DEPTID, NRI_ID, OIDAR, UNBODY].join(\"|\")\n);\n\nexport const GST_INVOICE_NUMBER_FORMAT = new RegExp(\"^[^\\\\W_][A-Za-z\\\\d\\\\-/]{0,15}$\");\n", "import {\n    GSTIN_REGEX,\n    REGISTERED_REGEX,\n    OVERSEAS_REGEX,\n    UNBODY_REGEX,\n    TDS_REGEX,\n    GST_INVOICE_NUMBER_FORMAT,\n} from \"./regex_constants\";\n\nfrappe.provide(\"india_compliance\");\n\nwindow.gst_settings = frappe.boot.gst_settings;\n\nObject.assign(india_compliance, {\n    get_gstin_query(party, party_type = \"Company\") {\n        if (!party) {\n            frappe.show_alert({\n                message: __(\"Please select {0} to get GSTIN options\", [__(party_type)]),\n                indicator: \"yellow\",\n            });\n            return;\n        }\n\n        return {\n            query: \"india_compliance.gst_india.utils.get_gstin_list\",\n            params: { party, party_type },\n        };\n    },\n\n    async get_gstin_options(party, party_type = \"Company\") {\n        const { query, params } = india_compliance.get_gstin_query(party, party_type);\n        const { message } = await frappe.call({\n            method: query,\n            args: params,\n        });\n        return message;\n    },\n\n    async get_account_options(company) {\n        if (!company) return;\n        const { message } = await frappe.call({\n            method: \"india_compliance.gst_india.utils.get_all_gst_accounts\",\n            args: {\n                company,\n            },\n        });\n\n        return message || [];\n    },\n\n    get_party_type(doctype) {\n        return in_list(frappe.boot.sales_doctypes, doctype) ? \"Customer\" : \"Supplier\";\n    },\n\n    async set_gstin_status(field, transaction_date, force_update = 0) {\n        const gstin = field.value;\n        if (!gstin || gstin.length !== 15) return field.set_description(\"\");\n\n        const { message } = await frappe.call({\n            method: \"india_compliance.gst_india.doctype.gstin.gstin.get_gstin_status\",\n            args: {\n                gstin,\n                transaction_date,\n                is_request_from_ui: 1,\n                force_update,\n            },\n        });\n\n        if (!message) return field.set_description(\"\");\n\n        field.set_description(\n            india_compliance.get_gstin_status_desc(\n                message?.status,\n                message?.last_updated_on\n            )\n        );\n\n        this.set_gstin_refresh_btn(field, transaction_date);\n\n        return message;\n    },\n\n    get_gstin_status_desc(status, datetime) {\n        if (!status) return;\n        const user_date = frappe.datetime.str_to_user(datetime);\n        const pretty_date = frappe.datetime.prettyDate(datetime);\n\n        const STATUS_COLORS = { Active: \"green\", Cancelled: \"red\" };\n        return `<div class=\"d-flex indicator ${STATUS_COLORS[status] || \"orange\"}\">\n                    Status:&nbsp;<strong>${status}</strong>\n                    <span class=\"text-right ml-auto gstin-last-updated\">\n                        <span title=\"${user_date}\">\n                            ${datetime ? \"updated \" + pretty_date : \"\"}\n                        </span>\n                    </span>\n                </div>`;\n    },\n\n    set_gstin_refresh_btn(field, transaction_date) {\n        if (\n            !this.is_api_enabled() ||\n            gst_settings.sandbox_mode ||\n            !gst_settings.validate_gstin_status ||\n            field.$wrapper.find(\".refresh-gstin\").length\n        )\n            return;\n\n        const refresh_btn = $(`\n            <svg class=\"icon icon-sm refresh-gstin\" style=\"\">\n                <use class=\"\" href=\"#icon-refresh\" style=\"cursor: pointer\"></use>\n            </svg>\n        `).appendTo(field.$wrapper.find(\".gstin-last-updated\"));\n\n        refresh_btn.on(\"click\", async function () {\n            const force_update = 1;\n            await india_compliance.set_gstin_status(\n                field,\n                transaction_date,\n                force_update\n            );\n        });\n    },\n\n    set_state_options(frm) {\n        const state_field = frm.get_field(\"state\");\n        const country = frm.get_field(\"country\").value;\n        if (country !== \"India\") {\n            state_field.set_data([]);\n            return;\n        }\n\n        state_field.set_data(frappe.boot.india_state_options || []);\n    },\n\n    can_enable_api(settings) {\n        return settings.api_secret || frappe.boot.ic_api_enabled_from_conf;\n    },\n\n    is_api_enabled(settings) {\n        if (!settings) settings = gst_settings;\n        return settings.enable_api && india_compliance.can_enable_api(settings);\n    },\n\n    is_e_invoice_enabled() {\n        return india_compliance.is_api_enabled() && gst_settings.enable_e_invoice;\n    },\n\n    validate_gstin(gstin) {\n        if (!gstin || gstin.length !== 15) return;\n\n        gstin = gstin.trim().toUpperCase();\n\n        if (GSTIN_REGEX.test(gstin) && is_gstin_check_digit_valid(gstin)) {\n            return gstin;\n        }\n    },\n\n    get_gstin_otp(error_type, company_gstin) {\n        let description =\n            \"An OTP has been sent to your registered mobile/email for further authentication. Please provide OTP.\";\n        if (error_type === \"invalid_otp\")\n            description = \"Invalid OTP was provided. Please try again.\";\n\n        return new Promise(resolve => {\n            const prompt = new frappe.ui.Dialog({\n                title: __(\"Enter OTP\"),\n                fields: [\n                    {\n                        fieldtype: \"Data\",\n                        label: __(\"One Time Password\"),\n                        fieldname: \"otp\",\n                        reqd: 1,\n                        description: description,\n                    },\n                ],\n                primary_action_label: __(\"Submit\"),\n                primary_action(values) {\n                    resolve(values.otp);\n                    prompt.hide();\n                },\n                secondary_action_label: __(\"Resend OTP\"),\n                secondary_action() {\n                    frappe.call({\n                        method: \"india_compliance.gst_india.doctype.purchase_reconciliation_tool.purchase_reconciliation_tool.resend_otp\",\n                        args: { company_gstin },\n                        callback: function () {\n                            frappe.show_alert({\n                                message: __(\"OTP has been resent.\"),\n                                indicator: \"green\",\n                            });\n                            prompt.get_secondary_btn().addClass(\"disabled\");\n                        },\n                    });\n                },\n            });\n            prompt.show();\n        });\n    },\n\n    guess_gst_category(gstin, country) {\n        if (!gstin) {\n            if (country && country !== \"India\") return \"Overseas\";\n            return \"Unregistered\";\n        }\n\n        if (TDS_REGEX.test(gstin)) return \"Tax Deductor\";\n        if (REGISTERED_REGEX.test(gstin)) return \"Registered Regular\";\n        if (UNBODY_REGEX.test(gstin)) return \"UIN Holders\";\n        if (OVERSEAS_REGEX.test(gstin)) return \"Overseas\";\n    },\n\n    set_hsn_code_query(field) {\n        if (!field || !gst_settings.validate_hsn_code) return;\n        field.get_query = function () {\n            const wildcard = \"_\".repeat(gst_settings.min_hsn_digits) + \"%\";\n            return {\n                filters: {\n                    name: [\"like\", wildcard],\n                },\n            };\n        };\n    },\n\n    set_reconciliation_status(frm, field) {\n        if (!frm.doc.docstatus === 1 || !frm.doc.reconciliation_status) return;\n\n        const STATUS_COLORS = {\n            Reconciled: \"green\",\n            Unreconciled: \"red\",\n            Ignored: \"grey\",\n            \"Not Applicable\": \"grey\",\n        };\n        const color = STATUS_COLORS[frm.doc.reconciliation_status];\n\n        frm.get_field(field).set_description(\n            `<div class=\"d-flex indicator ${color}\">\n                2A/2B Status:&nbsp;<strong>${frm.doc.reconciliation_status}</strong>\n            </div>`\n        );\n    },\n\n    validate_invoice_number(invoice_number) {\n        if (invoice_number.length > 16) {\n            frappe.throw(\n                __(\"GST Invoice Number cannot exceed 16 characters\"),\n                __(\"Invalid GST Invoice Number\")\n            );\n        }\n\n        if (!GST_INVOICE_NUMBER_FORMAT.test(invoice_number)) {\n            frappe.throw(\n                __(\n                    \"GST Invoice Number should start with an alphanumeric character and can only contain alphanumeric characters, dash (-) and slash (/)\"\n                ),\n                __(\"Invalid GST Invoice Number\")\n            );\n        }\n    },\n\n    trigger_file_download(file_content, file_name) {\n        let type = \"application/json;charset=utf-8\";\n\n        if (!file_name.endsWith(\".json\")) {\n            type = \"application/octet-stream\";\n        }\n        const blob = new Blob([file_content], { type: type });\n\n        // Create a link and set the URL using `createObjectURL`\n        const link = document.createElement(\"a\");\n        link.style.display = \"none\";\n        link.href = URL.createObjectURL(blob);\n        link.download = file_name;\n\n        // It needs to be added to the DOM so it can be clicked\n        document.body.appendChild(link);\n        link.click();\n\n        // To make this work on Firefox we need to wait\n        // a little while before removing it.\n        setTimeout(() => {\n            URL.revokeObjectURL(link.href);\n            link.parentNode.removeChild(link);\n        }, 0);\n    },\n\n    set_last_month_as_default_period(report) {\n        report.filters.forEach(filter => {\n            if (filter.fieldname === \"from_date\") {\n                filter.default = this.last_month_start();\n            }\n            if (filter.fieldname === \"to_date\") {\n                filter.default = this.last_month_end();\n            }\n        });\n    },\n\n    last_month_start() {\n        return frappe.datetime.add_months(frappe.datetime.month_start(), -1);\n    },\n\n    last_month_end() {\n        return frappe.datetime.add_days(frappe.datetime.month_start(), -1);\n    },\n\n    primary_to_danger_btn(parent) {\n        parent.$wrapper\n            .find(\".btn-primary\")\n            .removeClass(\"btn-primary\")\n            .addClass(\"btn-danger\");\n    },\n\n    add_divider_to_btn_group(btn_group_name) {\n        $(document)\n            .find(`.inner-group-button[data-label=${btn_group_name}]`)\n            .find(`.dropdown-menu`)\n            .append($('<li class=\"dropdown-divider\"></li>'));\n    },\n\n    make_text_red(btn_group_name, btn_name) {\n        $(document)\n            .find(`.inner-group-button[data-label=${btn_group_name}]`)\n            .find(`.dropdown-item[data-label=\"${encodeURIComponent(btn_name)}\"]`)\n            .addClass(\"text-danger\");\n    },\n});\n\nfunction is_gstin_check_digit_valid(gstin) {\n    /*\n    adapted from\n    https://gitlab.com/srikanthlogic/gstin-validator/-/blob/master/src/index.js\n    */\n\n    const GSTIN_CODEPOINT_CHARS = \"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n    const mod = GSTIN_CODEPOINT_CHARS.length;\n\n    let factor = 2;\n    let sum = 0;\n\n    for (let i = gstin.length - 2; i >= 0; i--) {\n        let codePoint = -1;\n        for (let j = 0; j < GSTIN_CODEPOINT_CHARS.length; j++) {\n            if (GSTIN_CODEPOINT_CHARS[j] === gstin[i]) {\n                codePoint = j;\n            }\n        }\n        let digit = factor * codePoint;\n        factor = factor === 2 ? 1 : 2;\n        digit = Math.floor(digit / mod) + (digit % mod);\n        sum += digit;\n    }\n\n    const checkCodePoint = (mod - (sum % mod)) % mod;\n    return GSTIN_CODEPOINT_CHARS[checkCodePoint] === gstin[14];\n}\n\n// Will be deprecated after v15 release, kept only for compatibility\n// DO NOT USE IN CODE\nwindow.ic = window.india_compliance;\n", "class GSTQuickEntryForm extends frappe.ui.form.QuickEntryForm {\n    constructor(...args) {\n        super(...args);\n        this.skip_redirect_on_error = true;\n        this.api_enabled =\n            india_compliance.is_api_enabled() && gst_settings.autofill_party_info;\n    }\n\n    async setup() {\n        await frappe.model.with_doctype(\"Address\");\n        super.setup();\n    }\n\n    render_dialog() {\n        super.render_dialog();\n        india_compliance.set_state_options(this.dialog);\n    }\n\n    get_address_fields() {\n        return [\n            {\n                label: __(\"Primary Address Details\"),\n                fieldname: \"primary_address_section\",\n                fieldtype: \"Section Break\",\n                description: this.api_enabled\n                    ? __(\n                          `When you enter a GSTIN, the permanent address linked to it is\n                        autofilled.<br>\n                        Change the {0} to autofill other addresses.`,\n                          [frappe.meta.get_label(\"Address\", \"pincode\")]\n                      )\n                    : \"\",\n                collapsible: 0,\n            },\n            {\n                // set as _pincode so that frappe.ui.form.Layout doesn't override it\n                fieldname: \"_pincode\",\n                fieldtype: \"Autocomplete\",\n                ignore_validation: true,\n            },\n            {\n                fieldname: \"address_line1\",\n                fieldtype: \"Data\",\n            },\n            {\n                fieldname: \"address_line2\",\n                fieldtype: \"Data\",\n            },\n            {\n                fieldtype: \"Column Break\",\n            },\n            {\n                fieldname: \"city\",\n                fieldtype: \"Data\",\n            },\n            {\n                fieldname: \"state\",\n                fieldtype: \"Autocomplete\",\n                ignore_validation: true,\n            },\n            {\n                fieldname: \"country\",\n                fieldtype: \"Link\",\n                options: \"Country\",\n                default: frappe.defaults.get_user_default(\"country\"),\n                onchange: () => {\n                    india_compliance.set_state_options(this.dialog);\n                },\n            },\n        ];\n    }\n\n    get_gstin_field() {\n        return [\n            {\n                ...frappe.meta.get_docfield(this.doctype, \"gstin\"),\n                fieldname: \"_gstin\",\n                fieldtype: \"Autocomplete\",\n                description: this.api_enabled ? get_gstin_description() : \"\",\n                ignore_validation: true,\n                onchange: () => {\n                    const d = this.dialog;\n                    if (this.api_enabled && !gst_settings.sandbox_mode)\n                        return autofill_fields(d);\n\n                    d.set_value(\n                        \"gst_category\",\n                        india_compliance.guess_gst_category(d.doc._gstin, d.doc.country)\n                    );\n                },\n            },\n        ];\n    }\n\n    update_doc() {\n        const doc = super.update_doc();\n        doc.pincode = doc._pincode;\n        doc.gstin = doc._gstin;\n        return doc;\n    }\n}\n\nclass PartyQuickEntryForm extends GSTQuickEntryForm {\n    get_address_fields() {\n        const fields = super.get_address_fields();\n\n        for (const field of fields) {\n            const fieldname =\n                field.fieldname === \"_pincode\" ? \"pincode\" : field.fieldname;\n\n            if (!field.label && fieldname) {\n                field.label = frappe.meta.get_label(\"Address\", fieldname);\n            }\n        }\n\n        return fields;\n    }\n\n    render_dialog() {\n        this.mandatory = [\n            ...this.get_gstin_field(),\n            ...this.mandatory,\n            ...this.get_contact_fields(),\n            ...this.get_address_fields(),\n        ];\n\n        if (this.doctype === \"Customer\") {\n            this.mandatory.push({\n                label: __(\"Customer POS ID\"),\n                fieldname: \"customer_pos_id\",\n                fieldtype: \"Data\",\n                hidden: 1,\n            });\n        }\n\n        super.render_dialog();\n    }\n\n    get_contact_fields() {\n        return [\n            {\n                label: __(\"Primary Contact Details\"),\n                fieldname: \"primary_contact_section\",\n                fieldtype: \"Section Break\",\n                collapsible: 0,\n            },\n            {\n                label: __(\"Email ID\"),\n                fieldname: \"_email_id\",\n                fieldtype: \"Data\",\n                options: \"Email\",\n            },\n            {\n                fieldtype: \"Column Break\",\n            },\n            {\n                label: __(\"Mobile Number\"),\n                fieldname: \"_mobile_no\",\n                fieldtype: \"Data\",\n            },\n        ];\n    }\n\n    update_doc() {\n        const doc = super.update_doc();\n        // to prevent clash with ERPNext\n        doc._address_line1 = doc.address_line1;\n        delete doc.address_line1;\n\n        // these fields were suffixed with _ to prevent them from being read only\n        doc.email_id = doc._email_id;\n        doc.mobile_no = doc._mobile_no;\n\n        return doc;\n    }\n}\n\nfrappe.ui.form.CustomerQuickEntryForm = PartyQuickEntryForm;\nfrappe.ui.form.SupplierQuickEntryForm = PartyQuickEntryForm;\n\nclass AddressQuickEntryForm extends GSTQuickEntryForm {\n    get_address_fields() {\n        const fields = super.get_address_fields();\n        const pincode_field = fields.find(field => field.fieldname === \"_pincode\");\n\n        for (const [key, value] of Object.entries(\n            frappe.meta.get_docfield(\"Address\", \"pincode\")\n        )) {\n            if (pincode_field[key] === undefined) pincode_field[key] = value;\n        }\n\n        return fields;\n    }\n\n    async render_dialog() {\n        const address_fields = this.get_address_fields();\n        const fields_to_exclude = address_fields.map(({ fieldname }) => fieldname);\n        fields_to_exclude.push(\"pincode\", \"address_line1\");\n\n        this.mandatory = [\n            ...this.get_dynamic_link_fields(),\n            ...this.get_gstin_field(),\n            ...this.mandatory.filter(\n                field => !fields_to_exclude.includes(field.fieldname)\n            ),\n            ...address_fields,\n        ];\n        super.render_dialog();\n        this.set_default_values();\n    }\n\n    get_dynamic_link_fields() {\n        return [\n            {\n                fieldname: \"link_doctype\",\n                fieldtype: \"Link\",\n                label: \"Link Document Type\",\n                options: \"DocType\",\n                get_query: () => {\n                    return {\n                        query: \"frappe.contacts.address_and_contact.filter_dynamic_link_doctypes\",\n                        filters: {\n                            fieldtype: \"HTML\",\n                            fieldname: \"address_html\",\n                        },\n                    };\n                },\n                onchange: async () => {\n                    const { value, last_value } = this.dialog.get_field(\"link_doctype\");\n\n                    if (value !== last_value) {\n                        // await to avoid clash with onchange of link_name field\n                        await this.dialog.set_value(\"link_name\", \"\");\n                    }\n                },\n            },\n            {\n                fieldtype: \"Column Break\",\n            },\n            {\n                fieldname: \"link_name\",\n                fieldtype: \"Dynamic Link\",\n                label: \"Link Name\",\n                get_options: df => df.doc.link_doctype,\n                onchange: async () => {\n                    const { link_doctype, link_name } = this.dialog.doc;\n\n                    if (\n                        !link_name ||\n                        !in_list(frappe.boot.gst_party_types, link_doctype)\n                    )\n                        return;\n\n                    const { message: gstin_list } = await frappe.call(\n                        \"india_compliance.gst_india.utils.get_gstin_list\",\n                        { party_type: link_doctype, party: link_name }\n                    );\n                    if (!gstin_list || !gstin_list.length) return;\n\n                    this.dialog.fields_dict._gstin.set_data(gstin_list.join(\"\\n\"));\n                },\n            },\n            {\n                fieldtype: \"Section Break\",\n            },\n        ];\n    }\n\n    update_doc() {\n        const doc = super.update_doc();\n        if (doc.link_doctype && doc.link_name) {\n            const link = frappe.model.add_child(doc, \"Dynamic Link\", \"links\");\n            link.link_doctype = doc.link_doctype;\n            link.link_name = doc.link_name;\n        }\n        return doc;\n    }\n\n    async set_default_values() {\n        const default_party = this.guess_default_party();\n        if (default_party && default_party.party) {\n            await this.dialog.set_value(\"link_doctype\", default_party.party_type);\n            this.dialog.set_value(\"link_name\", default_party.party);\n        }\n    }\n\n    guess_default_party() {\n        const doc = cur_frm && cur_frm.doc;\n        if (!doc) return;\n        if (\n            ![\n                ...frappe.boot.sales_doctypes,\n                ...frappe.boot.purchase_doctypes,\n                \"Customer\",\n                \"Supplier\",\n                \"Company\",\n            ].includes(doc.doctype)\n        )\n            return;\n\n        let party_type = doc.doctype;\n        let party = doc.name;\n\n        if (frappe.dynamic_link && frappe.dynamic_link.doc === doc) {\n            party_type = frappe.dynamic_link.doctype;\n            party = frappe.dynamic_link.doc[frappe.dynamic_link.fieldname];\n        }\n\n        return {\n            party_type: party_type,\n            party: party,\n        };\n    }\n}\n\nfrappe.ui.form.AddressQuickEntryForm = AddressQuickEntryForm;\n\nclass ItemQuickEntryForm extends frappe.ui.form.QuickEntryForm {\n    render_dialog() {\n        super.render_dialog();\n        india_compliance.set_hsn_code_query(this.dialog.get_field(\"gst_hsn_code\"));\n    }\n}\n\nfrappe.ui.form.ItemQuickEntryForm = ItemQuickEntryForm;\n\nasync function autofill_fields(dialog) {\n    const gstin = dialog.doc._gstin;\n    const gstin_field = dialog.get_field(\"_gstin\");\n\n    if (!gstin || gstin.length !== 15) {\n        const pincode_field = dialog.fields_dict._pincode;\n        pincode_field.set_data([]);\n        pincode_field.df.onchange = null;\n\n        gstin_field.set_description(get_gstin_description());\n        return;\n    }\n\n    const gstin_info = await get_gstin_info(gstin);\n    set_gstin_description(gstin_field, gstin_info.status);\n    map_gstin_info(dialog.doc, gstin_info);\n    dialog.refresh();\n\n    setup_pincode_field(dialog, gstin_info);\n}\n\nfunction set_gstin_description(gstin_field, status) {\n    if (!status) {\n        gstin_field.set_description(\"\");\n        return;\n    }\n\n    gstin_field.set_description(india_compliance.get_gstin_status_desc(status));\n}\n\nfunction setup_pincode_field(dialog, gstin_info) {\n    if (!gstin_info.all_addresses) return;\n\n    const pincode_field = dialog.fields_dict._pincode;\n    pincode_field.set_data(\n        gstin_info.all_addresses.map(address => {\n            return {\n                label: address.pincode,\n                value: address.pincode,\n                description: `${address.address_line1}, ${address.address_line2}, ${address.city}, ${address.state}`,\n            };\n        })\n    );\n\n    pincode_field.df.onchange = () => {\n        autofill_address(dialog.doc, gstin_info);\n        dialog.refresh();\n    };\n}\n\nfunction get_gstin_info(gstin, throw_error = true) {\n    return frappe\n        .call({\n            method: \"india_compliance.gst_india.utils.gstin_info.get_gstin_info\",\n            args: { gstin, throw_error },\n        })\n        .then(r => r.message);\n}\n\nfunction map_gstin_info(doc, gstin_info) {\n    if (!gstin_info) return;\n\n    update_party_info(doc, gstin_info);\n\n    if (gstin_info.permanent_address) {\n        update_address_info(doc, gstin_info.permanent_address);\n    }\n}\n\nfunction update_party_info(doc, gstin_info) {\n    doc.gstin = doc._gstin;\n    doc.gst_category = gstin_info.gst_category;\n\n    if (!in_list(frappe.boot.gst_party_types, doc.doctype)) return;\n\n    const party_name_field = `${doc.doctype.toLowerCase()}_name`;\n    doc[party_name_field] = gstin_info.business_name;\n}\n\nfunction update_address_info(doc, address) {\n    if (!address) return;\n\n    Object.assign(doc, address);\n    // set field renamed due conflict with frappe.ui.form.Layout\n    doc._pincode = address.pincode;\n}\n\nfunction autofill_address(doc, { all_addresses }) {\n    const { _pincode: pincode } = doc;\n    if (!pincode || pincode.length !== 6 || !all_addresses) return;\n\n    update_address_info(\n        doc,\n        all_addresses.find(address => address.pincode == pincode)\n    );\n}\n\nfunction get_gstin_description() {\n    if (!gst_settings.sandbox_mode) {\n        return __(\"Autofill party information by entering their GSTIN\");\n    }\n\n    return __(\"Autofill is not supported in sandbox mode\");\n}\n", "// functions in this file will apply to most transactions\n// POS Invoice is a notable exception since it doesn't get created from the UI\nfrappe.provide(\"india_compliance\");\n\nconst TRANSACTION_DOCTYPES = [\n    \"Quotation\",\n    \"Sales Order\",\n    \"Delivery Note\",\n    \"Sales Invoice\",\n    \"Purchase Order\",\n    \"Purchase Receipt\",\n    \"Purchase Invoice\",\n];\n\nfor (const doctype of TRANSACTION_DOCTYPES) {\n    fetch_gst_details(doctype);\n    validate_overseas_gst_category(doctype);\n    set_and_validate_gstin_status(doctype);\n}\n\nfor (const doctype of [\"Sales Invoice\", \"Delivery Note\"]) {\n    ignore_port_code_validation(doctype);\n}\n\nfunction fetch_gst_details(doctype) {\n    const event_fields = [\n        \"tax_category\",\n        \"company_gstin\",\n        \"place_of_supply\",\n        \"is_reverse_charge\",\n    ];\n\n    // we are using address below to prevent multiple event triggers\n    if (in_list(frappe.boot.sales_doctypes, doctype)) {\n        event_fields.push(\"customer_address\", \"is_export_with_gst\");\n    } else {\n        event_fields.push(\"supplier_address\");\n    }\n\n    const events = Object.fromEntries(\n        event_fields.map(field => [field, frm => update_gst_details(frm, field)])\n    );\n\n    frappe.ui.form.on(doctype, events);\n}\n\nasync function update_gst_details(frm, event) {\n    if (\n        frm.updating_party_details ||\n        !frm.doc.company ||\n        (event === \"place_of_supply\" && frm.__updating_gst_details)\n    )\n        return;\n\n    const party_type = india_compliance.get_party_type(frm.doc.doctype).toLowerCase();\n    const party_fieldname = frm.doc.doctype === \"Quotation\" ? \"party_name\" : party_type;\n    const party = frm.doc[party_fieldname];\n    if (!party) return;\n\n    if (in_list([\"company_gstin\", \"customer_address\", \"supplier_address\"], event)) {\n        frm.__update_place_of_supply = true;\n    }\n\n    if (frm.__gst_update_triggered) return;\n    frm.__gst_update_triggered = true;\n\n    const args = {\n        doctype: frm.doc.doctype,\n        company: frm.doc.company,\n    };\n\n    // wait for GSTINs to get fetched\n    await frappe.after_ajax();\n\n    // reset flags\n    frm.__gst_update_triggered = false;\n\n    if (frm.__update_place_of_supply) {\n        args.update_place_of_supply = 1;\n        frm.__update_place_of_supply = false;\n    }\n\n    const party_details = {};\n\n    // set \"customer\" or \"supplier\" (not applicable for Quotations with Lead)\n    if (frm.doc.doctype !== \"Quotation\" || frm.doc.party_type === \"Customer\") {\n        party_details[party_type] = party;\n    }\n\n    const fieldnames_to_set = [\n        \"tax_category\",\n        \"gst_category\",\n        \"company_gstin\",\n        \"place_of_supply\",\n        \"is_reverse_charge\",\n    ];\n\n    if (in_list(frappe.boot.sales_doctypes, frm.doc.doctype)) {\n        fieldnames_to_set.push(\n            \"customer_address\",\n            \"billing_address_gstin\",\n            \"is_export_with_gst\"\n        );\n    } else {\n        fieldnames_to_set.push(\"supplier_address\", \"supplier_gstin\");\n    }\n\n    for (const fieldname of fieldnames_to_set) {\n        party_details[fieldname] = frm.doc[fieldname];\n    }\n\n    args.party_details = JSON.stringify(party_details);\n\n    india_compliance.fetch_and_update_gst_details(frm, args);\n}\n\nindia_compliance.fetch_and_update_gst_details = function (frm, args, method) {\n    frappe.call({\n        method: method || \"india_compliance.gst_india.overrides.transaction.get_gst_details\",\n        args,\n        async callback(r) {\n            if (!r.message) return;\n\n            frm.__updating_gst_details = true;\n            await frm.set_value(r.message);\n            frm.__updating_gst_details = false;\n        },\n    });\n}\n\nfunction validate_overseas_gst_category(doctype) {\n    frappe.ui.form.on(doctype, {\n        gst_category(frm) {\n            const { enable_overseas_transactions } = gst_settings;\n            if (!is_overseas_transaction(frm) || enable_overseas_transactions) return;\n\n            frappe.throw(\n                __(\"Please enable SEZ / Overseas transactions in GST Settings first\")\n            );\n        },\n    });\n}\n\nfunction is_overseas_transaction(frm) {\n    if (frm.doc.gst_category === \"SEZ\") return true;\n\n    if (frappe.boot.sales_doctypes) return is_foreign_transaction(frm);\n\n    return frm.doc.gst_category === \"Overseas\";\n}\n\nfunction ignore_port_code_validation(doctype) {\n    frappe.ui.form.on(doctype, {\n        onload(frm) {\n            frm.set_df_property(\"port_code\", \"ignore_validation\", 1);\n        },\n    });\n}\n\nfunction is_foreign_transaction(frm) {\n    return (\n        frm.doc.gst_category === \"Overseas\" &&\n        frm.doc.place_of_supply === \"96-Other Countries\"\n    );\n}\n\nfunction set_and_validate_gstin_status(doctype) {\n    const gstin_field_name = frappe.boot.sales_doctypes.includes(doctype)\n        ? \"billing_address_gstin\"\n        : \"supplier_gstin\";\n\n    frappe.ui.form.on(doctype, {\n        refresh(frm) {\n            if (frm.doc[gstin_field_name])\n                _set_gstin_status(frm, gstin_field_name);\n        },\n\n        [gstin_field_name](frm) {\n            _set_and_validate_gstin_status(frm, gstin_field_name);\n        },\n\n        posting_date(frm) {\n            if (frm.get_field(\"posting_date\"))\n                _set_and_validate_gstin_status(frm, gstin_field_name);\n        },\n\n        transaction_date(frm) {\n            if (frm.get_field(\"transaction_date\"))\n                _set_and_validate_gstin_status(frm, gstin_field_name);\n        },\n    });\n}\n\nasync function _set_and_validate_gstin_status(frm, gstin_field_name) {\n    const gstin_doc = await _set_gstin_status(frm, gstin_field_name);\n    if (!gstin_doc) return;\n\n    validate_gstin_status(gstin_doc, frm, gstin_field_name);\n}\n\nasync function _set_gstin_status(frm, gstin_field_name) {\n    const gstin_field = frm.get_field(gstin_field_name);\n    const gstin = gstin_field.value;\n    const date_field =\n        frm.get_field(\"posting_date\") || frm.get_field(\"transaction_date\");\n\n\n    let gstin_doc = frm._gstin_doc?.[gstin];\n    if (!gstin_doc) {\n        gstin_doc = await india_compliance.set_gstin_status(gstin_field, date_field.value);\n\n        frm._gstin_doc = frm._gstin_doc || {};\n        frm._gstin_doc[gstin] = gstin_doc;\n    } else {\n        gstin_field.set_description(\n            india_compliance.get_gstin_status_desc(gstin_doc?.status, gstin_doc?.last_updated_on)\n        );\n    }\n\n    return gstin_doc;\n}\n\nfunction validate_gstin_status(gstin_doc, frm, gstin_field_name) {\n    if (!gst_settings.validate_gstin_status) return;\n\n    const date_field =\n        frm.get_field(\"posting_date\") || frm.get_field(\"transaction_date\");\n\n    const gstin_field = frm.get_field(gstin_field_name);\n    const transaction_date = frappe.datetime.str_to_obj(date_field.value);\n    const registration_date = frappe.datetime.str_to_obj(gstin_doc.registration_date);\n    const cancelled_date = frappe.datetime.str_to_obj(gstin_doc.cancelled_date);\n\n    if (!registration_date || transaction_date < registration_date)\n        frappe.throw({\n            message: __(\n                \"{0} is Registered on {1}. Please make sure that the {2} is on or after {1}\",\n                [\n                    gstin_field.df.label,\n                    frappe.datetime.str_to_user(gstin_doc.registration_date),\n                    date_field.df.label,\n                ]\n            ),\n            title: __(\"Invalid Party GSTIN\"),\n        });\n\n    if (gstin_doc.status === \"Cancelled\" && transaction_date >= cancelled_date)\n        frappe.throw({\n            message: __(\n                \"{0} is Cancelled from {1}. Please make sure that the {2} is before {1}\",\n                [\n                    gstin_field.df.label,\n                    frappe.datetime.str_to_user(gstin_doc.cancelled_date),\n                    date_field.df.label,\n                ]\n            ),\n            title: __(\"Invalid Party GSTIN\"),\n        });\n\n    if (![\"Active\", \"Cancelled\"].includes(gstin_doc.status))\n        frappe.throw({\n            message: __(\"Status of {0} is {1}\", [\n                gstin_field.df.label,\n                gstin_doc.status,\n            ]),\n            title: __(\"Invalid GSTIN Status\"),\n        });\n}\n\nfunction show_gst_invoice_no_banner(frm) {\n    frm.dashboard.clear_headline();\n    if (\n        !is_invoice_no_validation_required(\n            frm.doc.transaction_type || frm.doc.document_type\n        )\n    )\n        return;\n\n    frm.dashboard.set_headline_alert(\n        `Naming Series should <strong>not</strong> exceed 16 characters for GST. <a href=\"https://docs.indiacompliance.app/docs/miscellaneous/transaction_validations#document-name\" target=\"_blank\">Know more</a>`,\n        \"blue\"\n    );\n}\n\nfunction is_invoice_no_validation_required(transaction_type) {\n    return (\n        transaction_type === \"Sales Invoice\" ||\n        (transaction_type === \"Purchase Invoice\" &&\n            gst_settings.enable_e_waybill_from_pi) ||\n        (transaction_type === \"Delivery Note\" &&\n            gst_settings.enable_e_waybill_from_dn) ||\n        (transaction_type === \"Purchase Receipt\" &&\n            gst_settings.enable_e_waybill_from_pr)\n    );\n}\n", "$(document).on(\"app_ready\", async function() {\n    if (!frappe.boot.needs_audit_trail_notification) return;\n\n    // let other processes finish\n    await new Promise(resolve => setTimeout(resolve, 700));\n    const d = frappe.msgprint({\n        title: __(\"Configure Audit Trail\"),\n        indicator: \"orange\",\n        message: __(\n            `Dear India Compliance User,\n            <br><br>\n\n            In accordance with\n            <a\n              href='https://www.mca.gov.in/Ministry/pdf/AccountsAmendmentRules_24032021.pdf'\n              target='_blank'\n            >MCA Notification dated 24-03-2021</a>,\n            all companies registered in India are required to maintain an Audit Trail\n            of each and every transaction and creating an edit log of each change made\n            in books of account w.e.f 1st April 2023.\n            <br><br>\n            To comply with this requirement, we have introduced a new setting called\n            <strong>Enable Audit Trail</strong> in Accounts Settings.\n            <br><br>\n            <strong>Note:</strong>\n            <ul>\n                <li>Once this setting is enabled, it cannot be disabled.</li>\n                <li>\n                Enabling this setting will cause the following accounts setting\n                to get disabled to ensure Audit Trail integrity:<br>\n                <strong>\n                Delete Accounting and Stock Ledger Entries on deletion of Transaction\n                </strong>\n                </li>\n            </ul>\n\n\n            Would you like to enable the same?`\n        ),\n    });\n\n    d.set_primary_action(__(\"Enable Audit Trail\"), () => {\n        frappe.call({\n            method: \"india_compliance.audit_trail.utils.enable_audit_trail\",\n            callback(r) {\n                if (r.exc) return;\n\n                frappe.show_alert({\n                    message: __(\"Audit Trail Enabled\"),\n                    indicator: \"green\",\n                });\n            },\n        });\n\n        d.hide();\n    });\n\n    d.set_secondary_action_label(__(\"Review Accounts Settings\"));\n    d.set_secondary_action(() => {\n        frappe.set_route(\"Form\", \"Accounts Settings\");\n        d.hide();\n    });\n\n    d.onhide = () => {\n        frappe.xcall(\"india_compliance.audit_trail.utils.disable_audit_trail_notification\");\n    };\n});\n", "// TODO: Update documentation links\n$(document).on(\"app_ready\", async function () {\n    if (!frappe.boot.needs_item_tax_template_notification) return;\n\n    // let other processes finish\n    await new Promise(resolve => setTimeout(resolve, 700));\n    const d = frappe.msgprint({\n        title: __(\"\uD83D\uDEA8 Important: Changes to Item Tax Template\"),\n        indicator: \"orange\",\n        message: __(\n            `Dear India Compliance User,\n            <br><br>\n\n            We are pleased to inform you about a recent update on how Item Tax Templates are\n            maintained in India Compliance App.\n            <br><br>\n\n            Migration Guide:\n            <a\n                href='https://docs.indiacompliance.app/docs/developer-guide/migration-guide#item-tax-templates'\n                target='_blank'\n            >Migrating Item Tax Template</a>\n            <br><br>\n\n            <strong>Breaking Change:</strong>\n            <ul>\n                <li>GST Category for Nil-Rated, Exempted and Non-GST is introduced in Item Tax Template</li>\n                <li>Nil-Rated items are differentiated from Exempted for GST (configrable from Item Tax Template)</li>\n                <li><strong>Assumption Made:</strong> All transactions that were marked as Nil or Exempt,\n                are now marked as Nil-Rated.</li>\n            </ul>\n\n            <strong>Note:</strong>\n            If the above assumptions are not valid for your organization, please update item tax templates\n            accordingly for your items.\n            `\n        ),\n    });\n\n    d.onhide = () => {\n        frappe.xcall(\n            \"india_compliance.gst_india.utils.disable_item_tax_template_notification\"\n        );\n    };\n});\n", "frappe.provide(\"india_compliance\");\n\nindia_compliance.quick_info_popover = class QuickInfoPopover {\n\tconstructor(frm, field_dict) {\n        /**\n\t * Setup tooltip for fields to show details\n\t * @param {Object} frm          Form object\n\t * @param {Object} field_dict   Dictionary of fields with info to show\n\t */\n\n\t\tthis.frm = frm;\n\t\tthis.field_dict = field_dict;\n\t\tthis.make();\n\t}\n\tmake() {\n\t\tthis.create_info_popover();\n\t}\n\tcreate_info_popover() {\n\t\tif (!this.field_dict) return;\n\n\t\tfor (const [field, info] of Object.entries(this.field_dict)) {\n\t\t\tthis.create_info_icon(field);\n\n\t\t\tif (!this.info_btn) return;\n\n\t\t\tthis.info_btn.popover({\n\t\t\t\ttrigger: \"hover\",\n\t\t\t\tplacement: \"top\",\n\t\t\t\tcontent: () => this.get_content_html(field, info),\n\t\t\t\thtml: true,\n\t\t\t});\n\t\t}\n\t}\n\tcreate_info_icon(field) {\n\t\tlet field_area = this.frm.get_field(field).$wrapper.find(\".clearfix\");\n\t\tthis.info_btn = $(`<i class=\"fa fa-info-circle\"></i>`).appendTo(field_area);\n\t}\n\tget_content_html(field, info) {\n\t\tlet field_lable = frappe.meta.get_label(this.frm.doctype, field);\n\n\t\treturn `\n\t\t\t<div class=\"quick-info-popover\">\n\t\t\t\t<div class=\"preview-field\">\n\t\t\t\t\t<div class=\"preview-label text-muted\">${__(field_lable)}</div>\n\t\t\t\t\t<hr>\n\t\t\t\t\t<div class=\"preview-value\">${info}</div>\n\t\t\t\t</div>\n\t\t\t`;\n\t}\n};\n"],
  "mappings": "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",
  "names": ["NORMAL", "GOVT_DEPTID", "NRI_ID", "OIDAR", "UNBODY", "TDS", "REGISTERED_REGEX", "OVERSEAS_REGEX", "UNBODY_REGEX", "TDS_REGEX", "GSTIN_REGEX", "GST_INVOICE_NUMBER_FORMAT", "party", "party_type", "query", "params", "message", "company", "doctype", "field", "transaction_date", "force_update", "gstin", "status", "datetime", "user_date", "pretty_date", "frm", "state_field", "settings", "GSTIN_REGEX", "is_gstin_check_digit_valid", "error_type", "company_gstin", "description", "resolve", "prompt", "values", "country", "TDS_REGEX", "REGISTERED_REGEX", "UNBODY_REGEX", "OVERSEAS_REGEX", "wildcard", "color", "invoice_number", "GST_INVOICE_NUMBER_FORMAT", "file_content", "file_name", "type", "blob", "link", "report", "filter", "parent", "btn_group_name", "btn_name", "GSTIN_CODEPOINT_CHARS", "mod", "factor", "sum", "i", "codePoint", "j", "digit", "checkCodePoint", "GSTQuickEntryForm", "args", "__spreadProps", "__spreadValues", "get_gstin_description", "d", "autofill_fields", "doc", "PartyQuickEntryForm", "fields", "field", "fieldname", "AddressQuickEntryForm", "pincode_field", "key", "value", "address_fields", "fields_to_exclude", "last_value", "df", "link_doctype", "link_name", "gstin_list", "link", "default_party", "party_type", "party", "ItemQuickEntryForm", "dialog", "gstin", "gstin_field", "gstin_info", "get_gstin_info", "set_gstin_description", "map_gstin_info", "setup_pincode_field", "status", "address", "autofill_address", "throw_error", "r", "update_party_info", "update_address_info", "party_name_field", "all_addresses", "pincode", "TRANSACTION_DOCTYPES", "doctype", "fetch_gst_details", "validate_overseas_gst_category", "set_and_validate_gstin_status", "ignore_port_code_validation", "event_fields", "events", "field", "frm", "update_gst_details", "event", "party_type", "party_fieldname", "party", "args", "party_details", "fieldnames_to_set", "fieldname", "method", "r", "enable_overseas_transactions", "is_overseas_transaction", "is_foreign_transaction", "gstin_field_name", "_set_gstin_status", "_set_and_validate_gstin_status", "gstin_doc", "validate_gstin_status", "_a", "gstin_field", "gstin", "date_field", "transaction_date", "registration_date", "cancelled_date", "resolve", "d", "r", "resolve", "d", "frm", "field_dict", "field", "info", "field_area", "field_lable"]
}
